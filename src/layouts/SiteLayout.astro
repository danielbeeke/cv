---
import { pwaInfo } from 'virtual:pwa-info'
import '../style.scss'

const { language } = Astro.params;
---

<html lang={language}>
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<title>CV Daniël Beeke</title>
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<meta name="msapplication-TileColor" content="#173917">
		<meta name="theme-color" content="#173917">
		<meta name="apple-mobile-web-app-title" content="CV Daniël Beeke">
		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="apple-mobile-web-app-status-bar-style" content="black or black-translucent">
		<script src="/src/pwa.ts"></script>
		{ pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }
	</head>
	<body>
        <slot />
    </body>
</html>

<script>
	/** @ts-ignore */
	window.printPdf = () => {
		window.print()
	}

	const setSizes = () => {
		document.querySelectorAll('.done').forEach(item => item.classList.remove('done'))
		const expandables = document.querySelectorAll('.expandable,blockquote,.details')
		for (const expandable of expandables) {
			/** @ts-ignore */
			expandable.style = `
				--maxHeight: ${expandable.clientHeight}px;
				--minHeight: ${expandable.querySelector('.summary')?.clientHeight ?? expandable.querySelector('p:last-child')!.clientHeight - 24}px;
			`

			expandable.classList.add('done')
			expandable.classList.add('expandable')

			expandable.addEventListener('click', (event) => {
				if ((event.target as HTMLElement).closest('.expandable') === expandable) {
					expandable.classList.toggle('expanded')
				}
			})
		}
	}

	setSizes()
	
</script>